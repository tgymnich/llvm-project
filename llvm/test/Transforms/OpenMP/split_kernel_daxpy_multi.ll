; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --include-generated-funcs --version 4
; RUN: opt < %s -S -passes="openmp-opt-postlink,ipsccp,simplifycfg" | FileCheck %s

; ModuleID = '/app/example.ll'
source_filename = "ld-temp.o"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"
target triple = "nvptx64-nvidia-cuda"

%struct.DeviceMemoryPoolTy = type { ptr, i64 }
%struct.DeviceMemoryPoolTrackingTy = type { i64, i64, i64, i64 }
%struct.DeviceEnvironmentTy = type { i32, i32, i32, i32, i64, i64, i64, i64 }
%struct.ident_t = type { i32, i32, i32, i32, ptr }
%struct.DynamicEnvironmentTy = type { i16 }
%struct.KernelEnvironmentTy = type { %struct.ConfigurationEnvironmentTy, ptr, ptr }
%struct.ConfigurationEnvironmentTy = type { i8, i8, i8, i32, i32, i32, i32, i32, i32, i32, ptr }

@__omp_rtl_device_memory_pool = weak protected global %struct.DeviceMemoryPoolTy zeroinitializer, align 8
@__omp_rtl_device_memory_pool_tracker = weak protected global %struct.DeviceMemoryPoolTrackingTy zeroinitializer, align 8
@__omp_rtl_device_environment = weak protected addrspace(4) global %struct.DeviceEnvironmentTy undef, align 8
@anon.4366a9f5aebdd0016247148d3eaae749.0 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@anon.4366a9f5aebdd0016247148d3eaae749.1 = private unnamed_addr constant %struct.ident_t { i32 0, i32 2, i32 0, i32 22, ptr @anon.4366a9f5aebdd0016247148d3eaae749.0 }, align 8
@__omp_offloading_fd01_2a0317_daxpy_l22_dynamic_environment = weak_odr protected global %struct.DynamicEnvironmentTy zeroinitializer
@__omp_offloading_fd01_2a0317_daxpy_l22_kernel_environment = weak_odr protected local_unnamed_addr constant %struct.KernelEnvironmentTy { %struct.ConfigurationEnvironmentTy { i8 0, i8 0, i8 2, i32 1, i32 1024, i32 1, i32 1, i32 0, i32 0, i32 0, ptr null }, ptr @anon.4366a9f5aebdd0016247148d3eaae749.1, ptr @__omp_offloading_fd01_2a0317_daxpy_l22_dynamic_environment }
@llvm.used = appending global [3 x ptr] [ptr addrspacecast (ptr addrspace(4) @__omp_rtl_device_environment to ptr), ptr @__omp_rtl_device_memory_pool, ptr @__omp_rtl_device_memory_pool_tracker], section "llvm.metadata"

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ntid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.nctaid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: alwaysinline norecurse nounwind
define weak_odr protected void @__omp_offloading_fd01_2a0317_daxpy_l22(ptr noalias noundef %launch_env, ptr noundef %y_buf, ptr noundef %x_buf, i64 noundef %a) local_unnamed_addr #2 {
entry:
  %tid = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x() #4
  %ctaid = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #5, !range !16
  %nctaid = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x() #6, !range !17
  %i6 = shl nsw i32 %nctaid, 10
  %i7 = icmp slt i32 %ctaid, 1
  br i1 %i7, label %bb8, label %end

bb8:                                              ; preds = %entry
  %i9 = shl nsw i32 %ctaid, 10
  %i10 = or disjoint i32 %i9, 1023
  %i11 = tail call i32 @llvm.smin.i32(i32 %i10, i32 1023), !range !18
  %ntid = tail call i32 @llvm.nvvm.read.ptx.sreg.ntid.x() #6
  %a_double = bitcast i64 %a to double
  br label %bb14

bb14:                                             ; preds = %bb43, %bb8
  %i15 = phi i32 [ %i11, %bb8 ], [ %i46, %bb43 ]
  %i16 = phi i32 [ %i9, %bb8 ], [ %i44, %bb43 ]
  %i17 = zext i32 %i15 to i64
  %i18 = add nsw i32 %tid, %i16
  %i19 = sext i32 %i18 to i64
  %i20 = icmp ugt i64 %i19, %i17
  br i1 %i20, label %bb43, label %loop.cond

loop.cond:                                             ; preds = %bb38, %bb14
  %i = phi i64 [ %i41, %bb38 ], [ %i19, %bb14 ]
  %i_trunc = trunc i64 %i to i32
  %y_i_ptr = getelementptr inbounds double, ptr %y_buf, i64 %i
  %y_i = load double, ptr %y_i_ptr, align 8, !tbaa !19
  %cond = fcmp ogt double %y_i, 2.300000e+00
  %x_i_ptr = getelementptr inbounds double, ptr %x_buf, i64 %i
  br i1 %cond, label %if, label %else

if:                                             ; preds = %loop.cond
  call void @__ompx_split() #7
  %x_i = load double, ptr %x_i_ptr, align 8, !tbaa !19
  %y_i1 = load double, ptr %y_i_ptr, align 8, !tbaa !19
  %add = fadd double %x_i, %y_i1
  br label %bb38

else:                                             ; preds = %loop.cond
  call void @__ompx_split() #7
  %x_i1 = load double, ptr %x_i_ptr, align 8, !tbaa !19
  %y_i2 = load double, ptr %y_i_ptr, align 8, !tbaa !19
  %fma = tail call double @llvm.fmuladd.f64(double %a_double, double %x_i1, double %y_i2)
  br label %bb38

bb38:                                             ; preds = %else, %if
  %res = phi double [ %fma, %else ], [ %add, %if ]
  store double %res, ptr %y_i_ptr, align 8, !tbaa !19
  %i40 = add nsw i32 %ntid, %i_trunc
  %i41 = sext i32 %i40 to i64
  %i42 = icmp ugt i64 %i41, %i17
  br i1 %i42, label %bb43, label %loop.cond

bb43:                                             ; preds = %bb38, %bb14
  tail call void @llvm.nvvm.barrier0() #8
  %i44 = add nsw i32 %i16, %i6
  %i45 = add nsw i32 %i15, %i6
  %i46 = tail call i32 @llvm.smin.i32(i32 %i45, i32 1023)
  %i47 = icmp slt i32 %i44, 1024
  br i1 %i47, label %bb14, label %end

end:                                             ; preds = %bb43, %entry
  ret void
}

; Function Attrs: convergent
declare void @__ompx_split() local_unnamed_addr #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fmuladd.f64(double, double, double) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { alwaysinline norecurse nounwind "frame-pointer"="all" "kernel" "no-trapping-math"="true" "omp_target_num_teams"="1" "omp_target_thread_limit"="1024" "stack-protector-buffer-size"="8" "target-cpu"="sm_86" "target-features"="+ptx81,+sm_86" }
attributes #3 = { convergent "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="sm_86" "target-features"="+ptx81,+sm_86" }
attributes #4 = { "llvm.assume"="ompx_no_call_asm" }
attributes #5 = { nofree nosync willreturn "llvm.assume"="ompx_no_call_asm" }
attributes #6 = { nosync "llvm.assume"="ompx_no_call_asm" }
attributes #7 = { convergent nounwind }
attributes #8 = { "llvm.assume"="ompx_no_call_asm,ompx_aligned_barrier" }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !1}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8, !9}
!nvvm.annotations = !{!10, !11, !12, !13}
!omp_offload.info = !{!14}
!nvvmir.version = !{!15}

!0 = !{!"clang version 19.0.0git (git@github.com:tgymnich/llvm-project.git b0760cf81856b9e21aad4e565cad848678598732)"}
!1 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!2 = !{i32 1, !"wchar_size", i32 4}
!3 = !{i32 7, !"openmp", i32 51}
!4 = !{i32 7, !"openmp-device", i32 51}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 7, !"frame-pointer", i32 2}
!7 = !{i32 1, !"ThinLTO", i32 0}
!8 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!9 = !{i32 2, !"SDK Version", [2 x i32] [i32 12, i32 1]}
!10 = !{ptr @__omp_offloading_fd01_2a0317_daxpy_l22, !"maxclusterrank", i32 1}
!11 = !{ptr @__omp_offloading_fd01_2a0317_daxpy_l22, !"minctasm", i32 1}
!12 = !{ptr @__omp_offloading_fd01_2a0317_daxpy_l22, !"maxntidx", i32 1024}
!13 = !{ptr @__omp_offloading_fd01_2a0317_daxpy_l22, !"kernel", i32 1}
!14 = !{i32 0, i32 64769, i32 2753303, !"daxpy", i32 22, i32 0, i32 0}
!15 = !{i32 2, i32 0}
!16 = !{i32 0, i32 -1}
!17 = !{i32 1, i32 0}
!18 = !{i32 -2147483648, i32 1024}
!19 = !{!20, !20, i64 0}
!20 = !{!"double", !21, i64 0}
!21 = !{!"omnipotent char", !22, i64 0}
!22 = !{!"Simple C/C++ TBAA"}

; CHECK-LABEL: define weak_odr protected void @__omp_offloading_fd01_2a0317_daxpy_l22(
; CHECK-SAME: ptr noalias noundef [[LAUNCH_ENV:%.*]], ptr noundef [[Y_BUF:%.*]], ptr noundef [[X_BUF:%.*]], i64 noundef [[A:%.*]]) local_unnamed_addr #[[ATTR2:[0-9]+]] {
; CHECK-NEXT:  ContDispatchBB:
; CHECK-NEXT:    [[NTID:%.*]] = tail call i32 @llvm.nvvm.read.ptx.sreg.ntid.x() #[[ATTR4:[0-9]+]]
; CHECK-NEXT:    [[NCTAID:%.*]] = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x() #[[ATTR4]], !range [[RNG18:![0-9]+]]
; CHECK-NEXT:    [[CTAID:%.*]] = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #[[ATTR5:[0-9]+]], !range [[RNG19:![0-9]+]]
; CHECK-NEXT:    [[TID:%.*]] = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x() #[[ATTR6:[0-9]+]]
; CHECK-NEXT:    [[I6:%.*]] = shl nsw i32 [[NCTAID]], 10
; CHECK-NEXT:    [[I7:%.*]] = icmp slt i32 [[CTAID]], 1
; CHECK-NEXT:    br i1 [[I7]], label [[BB8:%.*]], label [[END:%.*]]
; CHECK:       bb8:
; CHECK-NEXT:    [[I9:%.*]] = shl nsw i32 [[CTAID]], 10
; CHECK-NEXT:    [[I10:%.*]] = or disjoint i32 [[I9]], 1023
; CHECK-NEXT:    [[I11:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I10]], i32 1023), !range [[RNG20:![0-9]+]]
; CHECK-NEXT:    [[A_DOUBLE:%.*]] = bitcast i64 [[A]] to double
; CHECK-NEXT:    br label [[BB14:%.*]]
; CHECK:       bb14:
; CHECK-NEXT:    [[I662:%.*]] = phi i32 [ [[I6]], [[BB8]] ], [ [[I662]], [[BB43:%.*]] ]
; CHECK-NEXT:    [[NTID59:%.*]] = phi i32 [ [[NTID]], [[BB8]] ], [ [[NTID59]], [[BB43]] ]
; CHECK-NEXT:    [[TID55:%.*]] = phi i32 [ [[TID]], [[BB8]] ], [ [[TID55]], [[BB43]] ]
; CHECK-NEXT:    [[NCTAID45:%.*]] = phi i32 [ [[NCTAID]], [[BB8]] ], [ [[NCTAID45]], [[BB43]] ]
; CHECK-NEXT:    [[I15:%.*]] = phi i32 [ [[I11]], [[BB8]] ], [ [[I46:%.*]], [[BB43]] ]
; CHECK-NEXT:    [[I16:%.*]] = phi i32 [ [[I9]], [[BB8]] ], [ [[I44:%.*]], [[BB43]] ]
; CHECK-NEXT:    [[I17:%.*]] = zext i32 [[I15]] to i64
; CHECK-NEXT:    [[I18:%.*]] = add nsw i32 [[TID55]], [[I16]]
; CHECK-NEXT:    [[I19:%.*]] = sext i32 [[I18]] to i64
; CHECK-NEXT:    [[I20:%.*]] = icmp ugt i64 [[I19]], [[I17]]
; CHECK-NEXT:    br i1 [[I20]], label [[BB43]], label [[LOOP_COND:%.*]]
; CHECK:       loop.cond:
; CHECK-NEXT:    [[I19_LOOP_COND:%.*]] = phi i64 [ [[I19]], [[BB14]] ]
; CHECK-NEXT:    [[I_TRUNC:%.*]] = trunc i64 [[I19_LOOP_COND]] to i32
; CHECK-NEXT:    [[Y_I_PTR:%.*]] = getelementptr inbounds double, ptr [[Y_BUF]], i64 [[I19_LOOP_COND]]
; CHECK-NEXT:    [[Y_I:%.*]] = load double, ptr [[Y_I_PTR]], align 8, !tbaa [[TBAA21:![0-9]+]]
; CHECK-NEXT:    [[COND:%.*]] = fcmp ogt double [[Y_I]], 2.300000e+00
; CHECK-NEXT:    [[X_I_PTR:%.*]] = getelementptr inbounds double, ptr [[X_BUF]], i64 [[I19_LOOP_COND]]
; CHECK-NEXT:    br i1 [[COND]], label [[CACHESTORE0:%.*]], label [[CACHESTORE1:%.*]]
; CHECK:       CacheStore0:
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0:%.*]], ptr [[LAUNCH_ENV]], i32 0, i32 3
; CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8
; CHECK-NEXT:    [[CONTCOUNT_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 0
; CHECK-NEXT:    [[CACHEIDX:%.*]] = atomicrmw add ptr [[CONTCOUNT_PTR]], i32 1 monotonic, align 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds ptr, ptr [[TMP3]], i32 0
; CHECK-NEXT:    [[CACHE_OUT_PTR:%.*]] = load ptr, ptr [[TMP4]], align 8
; CHECK-NEXT:    [[CACHECELL:%.*]] = getelementptr inbounds [[CACHE_CELL0:%.*]], ptr [[CACHE_OUT_PTR]], i32 [[CACHEIDX]]
; CHECK-NEXT:    [[NCTAID_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 0
; CHECK-NEXT:    store i32 [[NCTAID45]], ptr [[NCTAID_CACHEIDX]], align 4, !invariant.group [[META25:![0-9]+]]
; CHECK-NEXT:    [[I_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 1
; CHECK-NEXT:    store i64 [[I19_LOOP_COND]], ptr [[I_CACHEIDX]], align 8, !invariant.group [[META26:![0-9]+]]
; CHECK-NEXT:    [[I16_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 2
; CHECK-NEXT:    store i32 [[I16]], ptr [[I16_CACHEIDX]], align 4, !invariant.group [[META27:![0-9]+]]
; CHECK-NEXT:    [[I15_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 3
; CHECK-NEXT:    store i32 [[I15]], ptr [[I15_CACHEIDX]], align 4, !invariant.group [[META28:![0-9]+]]
; CHECK-NEXT:    [[TID_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 4
; CHECK-NEXT:    store i32 [[TID55]], ptr [[TID_CACHEIDX]], align 4, !invariant.group [[META29:![0-9]+]]
; CHECK-NEXT:    [[NTID_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 5
; CHECK-NEXT:    store i32 [[NTID59]], ptr [[NTID_CACHEIDX]], align 4, !invariant.group [[META30:![0-9]+]]
; CHECK-NEXT:    br label [[THREADEXIT:%.*]]
; CHECK:       CacheStore1:
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 3
; CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[TMP5]], align 8
; CHECK-NEXT:    [[CONTCOUNT_PTR8:%.*]] = getelementptr inbounds i32, ptr [[TMP6]], i32 1
; CHECK-NEXT:    [[CACHEIDX9:%.*]] = atomicrmw add ptr [[CONTCOUNT_PTR8]], i32 1 monotonic, align 4
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 4
; CHECK-NEXT:    [[TMP8:%.*]] = load ptr, ptr [[TMP7]], align 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds ptr, ptr [[TMP8]], i32 1
; CHECK-NEXT:    [[CACHE_OUT_PTR10:%.*]] = load ptr, ptr [[TMP9]], align 8
; CHECK-NEXT:    [[CACHECELL11:%.*]] = getelementptr inbounds [[CACHE_CELL1:%.*]], ptr [[CACHE_OUT_PTR10]], i32 [[CACHEIDX9]]
; CHECK-NEXT:    [[NCTAID_CACHEIDX12:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL11]], i32 0, i32 0
; CHECK-NEXT:    store i32 [[NCTAID45]], ptr [[NCTAID_CACHEIDX12]], align 4, !invariant.group [[META31:![0-9]+]]
; CHECK-NEXT:    [[I_CACHEIDX13:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL11]], i32 0, i32 1
; CHECK-NEXT:    store i64 [[I19_LOOP_COND]], ptr [[I_CACHEIDX13]], align 8, !invariant.group [[META32:![0-9]+]]
; CHECK-NEXT:    [[I16_CACHEIDX14:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL11]], i32 0, i32 2
; CHECK-NEXT:    store i32 [[I16]], ptr [[I16_CACHEIDX14]], align 4, !invariant.group [[META33:![0-9]+]]
; CHECK-NEXT:    [[I15_CACHEIDX15:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL11]], i32 0, i32 3
; CHECK-NEXT:    store i32 [[I15]], ptr [[I15_CACHEIDX15]], align 4, !invariant.group [[META34:![0-9]+]]
; CHECK-NEXT:    [[TID_CACHEIDX16:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL11]], i32 0, i32 4
; CHECK-NEXT:    store i32 [[TID55]], ptr [[TID_CACHEIDX16]], align 4, !invariant.group [[META35:![0-9]+]]
; CHECK-NEXT:    [[NTID_CACHEIDX17:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL11]], i32 0, i32 5
; CHECK-NEXT:    store i32 [[NTID59]], ptr [[NTID_CACHEIDX17]], align 4, !invariant.group [[META36:![0-9]+]]
; CHECK-NEXT:    br label [[THREADEXIT]]
; CHECK:       bb43:
; CHECK-NEXT:    tail call void @llvm.nvvm.barrier0() #[[ATTR7:[0-9]+]]
; CHECK-NEXT:    [[I44]] = add nsw i32 [[I16]], [[I662]]
; CHECK-NEXT:    [[I45:%.*]] = add nsw i32 [[I15]], [[I662]]
; CHECK-NEXT:    [[I46]] = tail call i32 @llvm.smin.i32(i32 [[I45]], i32 1023)
; CHECK-NEXT:    [[I47:%.*]] = icmp slt i32 [[I44]], 1024
; CHECK-NEXT:    br i1 [[I47]], label [[BB14]], label [[END]]
; CHECK:       end:
; CHECK-NEXT:    ret void
; CHECK:       ThreadExit:
; CHECK-NEXT:    call void asm sideeffect "exit
; CHECK-NEXT:    unreachable
;
;
; CHECK-LABEL: define weak_odr protected void @__omp_offloading_fd01_2a0317_daxpy_l22_contd_0(
; CHECK-SAME: ptr noalias noundef [[LAUNCH_ENV:%.*]], ptr noundef [[Y_BUF:%.*]], ptr noundef [[X_BUF:%.*]], i64 noundef [[A:%.*]]) local_unnamed_addr #[[ATTR2]] {
; CHECK-NEXT:  ContDispatchBB:
; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
; CHECK-NEXT:    [[TMP3:%.*]] = mul i32 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[GTID:%.*]] = add i32 [[TMP0]], [[TMP3]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0:%.*]], ptr [[LAUNCH_ENV]], i32 0, i32 3
; CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP4]], align 8
; CHECK-NEXT:    [[CONTCOUNT_IN_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP5]], i32 2
; CHECK-NEXT:    [[CONTCOUNT_IN:%.*]] = load i32, ptr [[CONTCOUNT_IN_PTR]], align 4
; CHECK-NEXT:    [[MASKTHREAD:%.*]] = icmp ult i32 [[GTID]], [[CONTCOUNT_IN]]
; CHECK-NEXT:    br i1 [[MASKTHREAD]], label [[CACHEREMAT0:%.*]], label [[THREADEXIT:%.*]]
; CHECK:       loop.cond:
; CHECK-NEXT:    [[NTID58:%.*]] = phi i32 [ [[NTID57:%.*]], [[BB14_FROM_BB43:%.*]] ], [ [[NTID_CACHE:%.*]], [[CACHEREMAT0]] ]
; CHECK-NEXT:    [[TID54:%.*]] = phi i32 [ [[TID53:%.*]], [[BB14_FROM_BB43]] ], [ [[TID_CACHE:%.*]], [[CACHEREMAT0]] ]
; CHECK-NEXT:    [[I1551:%.*]] = phi i32 [ [[I46_BB14:%.*]], [[BB14_FROM_BB43]] ], [ [[I15_CACHE:%.*]], [[CACHEREMAT0]] ]
; CHECK-NEXT:    [[I1648:%.*]] = phi i32 [ [[I44_BB14:%.*]], [[BB14_FROM_BB43]] ], [ [[I16_CACHE:%.*]], [[CACHEREMAT0]] ]
; CHECK-NEXT:    [[NCTAID44:%.*]] = phi i32 [ [[NCTAID43:%.*]], [[BB14_FROM_BB43]] ], [ [[NCTAID_CACHE:%.*]], [[CACHEREMAT0]] ]
; CHECK-NEXT:    [[I:%.*]] = phi i64 [ [[I19:%.*]], [[BB14_FROM_BB43]] ], [ [[I41:%.*]], [[CACHEREMAT0]] ]
; CHECK-NEXT:    [[I_TRUNC:%.*]] = trunc i64 [[I]] to i32
; CHECK-NEXT:    [[Y_I_PTR:%.*]] = getelementptr inbounds double, ptr [[Y_BUF]], i64 [[I]]
; CHECK-NEXT:    [[Y_I:%.*]] = load double, ptr [[Y_I_PTR]], align 8, !tbaa [[TBAA21]]
; CHECK-NEXT:    [[COND:%.*]] = fcmp ogt double [[Y_I]], 2.300000e+00
; CHECK-NEXT:    [[X_I_PTR:%.*]] = getelementptr inbounds double, ptr [[X_BUF]], i64 [[I]]
; CHECK-NEXT:    br i1 [[COND]], label [[CACHESTORE0:%.*]], label [[CACHESTORE1:%.*]]
; CHECK:       CacheStore0:
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 3
; CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8
; CHECK-NEXT:    [[CONTCOUNT_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP7]], i32 0
; CHECK-NEXT:    [[CACHEIDX:%.*]] = atomicrmw add ptr [[CONTCOUNT_PTR]], i32 1 monotonic, align 4
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 4
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[TMP8]], align 8
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds ptr, ptr [[TMP9]], i32 0
; CHECK-NEXT:    [[CACHE_OUT_PTR:%.*]] = load ptr, ptr [[TMP10]], align 8
; CHECK-NEXT:    [[CACHECELL:%.*]] = getelementptr inbounds [[CACHE_CELL0:%.*]], ptr [[CACHE_OUT_PTR]], i32 [[CACHEIDX]]
; CHECK-NEXT:    [[NCTAID_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 0
; CHECK-NEXT:    store i32 [[NCTAID44]], ptr [[NCTAID_CACHEIDX]], align 4, !invariant.group [[META25]]
; CHECK-NEXT:    [[I_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 1
; CHECK-NEXT:    store i64 [[I]], ptr [[I_CACHEIDX]], align 8, !invariant.group [[META26]]
; CHECK-NEXT:    [[I16_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 2
; CHECK-NEXT:    store i32 [[I1648]], ptr [[I16_CACHEIDX]], align 4, !invariant.group [[META27]]
; CHECK-NEXT:    [[I15_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 3
; CHECK-NEXT:    store i32 [[I1551]], ptr [[I15_CACHEIDX]], align 4, !invariant.group [[META28]]
; CHECK-NEXT:    [[TID_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 4
; CHECK-NEXT:    store i32 [[TID54]], ptr [[TID_CACHEIDX]], align 4, !invariant.group [[META29]]
; CHECK-NEXT:    [[NTID_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 5
; CHECK-NEXT:    store i32 [[NTID58]], ptr [[NTID_CACHEIDX]], align 4, !invariant.group [[META30]]
; CHECK-NEXT:    br label [[THREADEXIT]]
; CHECK:       CacheRemat0:
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 4
; CHECK-NEXT:    [[TMP12:%.*]] = load ptr, ptr [[TMP11]], align 8
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds ptr, ptr [[TMP12]], i32 2
; CHECK-NEXT:    [[CACHE_IN_PTR:%.*]] = load ptr, ptr [[TMP13]], align 8
; CHECK-NEXT:    [[CACHECELL1:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHE_IN_PTR]], i32 [[GTID]]
; CHECK-NEXT:    [[NCTAID_CACHEIDX2:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL1]], i32 0, i32 0
; CHECK-NEXT:    [[NCTAID_CACHE]] = load i32, ptr [[NCTAID_CACHEIDX2]], align 4, !invariant.group [[META25]]
; CHECK-NEXT:    [[I_CACHEIDX3:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL1]], i32 0, i32 1
; CHECK-NEXT:    [[I_CACHE:%.*]] = load i64, ptr [[I_CACHEIDX3]], align 8, !invariant.group [[META26]]
; CHECK-NEXT:    [[I16_CACHEIDX4:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL1]], i32 0, i32 2
; CHECK-NEXT:    [[I16_CACHE]] = load i32, ptr [[I16_CACHEIDX4]], align 4, !invariant.group [[META27]]
; CHECK-NEXT:    [[I15_CACHEIDX5:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL1]], i32 0, i32 3
; CHECK-NEXT:    [[I15_CACHE]] = load i32, ptr [[I15_CACHEIDX5]], align 4, !invariant.group [[META28]]
; CHECK-NEXT:    [[TID_CACHEIDX6:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL1]], i32 0, i32 4
; CHECK-NEXT:    [[TID_CACHE]] = load i32, ptr [[TID_CACHEIDX6]], align 4, !invariant.group [[META29]]
; CHECK-NEXT:    [[NTID_CACHEIDX7:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL1]], i32 0, i32 5
; CHECK-NEXT:    [[NTID_CACHE]] = load i32, ptr [[NTID_CACHEIDX7]], align 4, !invariant.group [[META30]]
; CHECK-NEXT:    [[I6_RECOMPUTE:%.*]] = shl nsw i32 [[NCTAID_CACHE]], 10
; CHECK-NEXT:    [[A_DOUBLE_RECOMPUTE:%.*]] = bitcast i64 [[A]] to double
; CHECK-NEXT:    [[I_TRUNC_RECOMPUTE:%.*]] = trunc i64 [[I_CACHE]] to i32
; CHECK-NEXT:    [[I17_RECOMPUTE:%.*]] = zext i32 [[I15_CACHE]] to i64
; CHECK-NEXT:    [[X_I_PTR_RECOMPUTE:%.*]] = getelementptr inbounds double, ptr [[X_BUF]], i64 [[I_CACHE]]
; CHECK-NEXT:    [[Y_I_PTR_RECOMPUTE:%.*]] = getelementptr inbounds double, ptr [[Y_BUF]], i64 [[I_CACHE]]
; CHECK-NEXT:    [[X_I:%.*]] = load double, ptr [[X_I_PTR_RECOMPUTE]], align 8, !tbaa [[TBAA21]]
; CHECK-NEXT:    [[Y_I1:%.*]] = load double, ptr [[Y_I_PTR_RECOMPUTE]], align 8, !tbaa [[TBAA21]]
; CHECK-NEXT:    [[ADD:%.*]] = fadd double [[X_I]], [[Y_I1]]
; CHECK-NEXT:    store double [[ADD]], ptr [[Y_I_PTR_RECOMPUTE]], align 8, !tbaa [[TBAA21]]
; CHECK-NEXT:    [[I40:%.*]] = add nsw i32 [[NTID_CACHE]], [[I_TRUNC_RECOMPUTE]]
; CHECK-NEXT:    [[I41]] = sext i32 [[I40]] to i64
; CHECK-NEXT:    [[I42:%.*]] = icmp ugt i64 [[I41]], [[I17_RECOMPUTE]]
; CHECK-NEXT:    br i1 [[I42]], label [[BB43:%.*]], label [[LOOP_COND:%.*]]
; CHECK:       CacheStore1:
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 3
; CHECK-NEXT:    [[TMP15:%.*]] = load ptr, ptr [[TMP14]], align 8
; CHECK-NEXT:    [[CONTCOUNT_PTR8:%.*]] = getelementptr inbounds i32, ptr [[TMP15]], i32 1
; CHECK-NEXT:    [[CACHEIDX9:%.*]] = atomicrmw add ptr [[CONTCOUNT_PTR8]], i32 1 monotonic, align 4
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 4
; CHECK-NEXT:    [[TMP17:%.*]] = load ptr, ptr [[TMP16]], align 8
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr inbounds ptr, ptr [[TMP17]], i32 1
; CHECK-NEXT:    [[CACHE_OUT_PTR10:%.*]] = load ptr, ptr [[TMP18]], align 8
; CHECK-NEXT:    [[CACHECELL11:%.*]] = getelementptr inbounds [[CACHE_CELL1:%.*]], ptr [[CACHE_OUT_PTR10]], i32 [[CACHEIDX9]]
; CHECK-NEXT:    [[NCTAID_CACHEIDX12:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL11]], i32 0, i32 0
; CHECK-NEXT:    store i32 [[NCTAID44]], ptr [[NCTAID_CACHEIDX12]], align 4, !invariant.group [[META31]]
; CHECK-NEXT:    [[I_CACHEIDX13:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL11]], i32 0, i32 1
; CHECK-NEXT:    store i64 [[I]], ptr [[I_CACHEIDX13]], align 8, !invariant.group [[META32]]
; CHECK-NEXT:    [[I16_CACHEIDX14:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL11]], i32 0, i32 2
; CHECK-NEXT:    store i32 [[I1648]], ptr [[I16_CACHEIDX14]], align 4, !invariant.group [[META33]]
; CHECK-NEXT:    [[I15_CACHEIDX15:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL11]], i32 0, i32 3
; CHECK-NEXT:    store i32 [[I1551]], ptr [[I15_CACHEIDX15]], align 4, !invariant.group [[META34]]
; CHECK-NEXT:    [[TID_CACHEIDX16:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL11]], i32 0, i32 4
; CHECK-NEXT:    store i32 [[TID54]], ptr [[TID_CACHEIDX16]], align 4, !invariant.group [[META35]]
; CHECK-NEXT:    [[NTID_CACHEIDX17:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL11]], i32 0, i32 5
; CHECK-NEXT:    store i32 [[NTID58]], ptr [[NTID_CACHEIDX17]], align 4, !invariant.group [[META36]]
; CHECK-NEXT:    br label [[THREADEXIT]]
; CHECK:       bb43:
; CHECK-NEXT:    [[I661:%.*]] = phi i32 [ [[I6_RECOMPUTE]], [[CACHEREMAT0]] ], [ [[I661]], [[BB14_FROM_BB43]] ]
; CHECK-NEXT:    [[NTID57]] = phi i32 [ [[NTID_CACHE]], [[CACHEREMAT0]] ], [ [[NTID57]], [[BB14_FROM_BB43]] ]
; CHECK-NEXT:    [[TID53]] = phi i32 [ [[TID_CACHE]], [[CACHEREMAT0]] ], [ [[TID53]], [[BB14_FROM_BB43]] ]
; CHECK-NEXT:    [[I1550:%.*]] = phi i32 [ [[I15_CACHE]], [[CACHEREMAT0]] ], [ [[I46_BB14]], [[BB14_FROM_BB43]] ]
; CHECK-NEXT:    [[I1647:%.*]] = phi i32 [ [[I16_CACHE]], [[CACHEREMAT0]] ], [ [[I44_BB14]], [[BB14_FROM_BB43]] ]
; CHECK-NEXT:    [[NCTAID43]] = phi i32 [ [[NCTAID_CACHE]], [[CACHEREMAT0]] ], [ [[NCTAID43]], [[BB14_FROM_BB43]] ]
; CHECK-NEXT:    tail call void @llvm.nvvm.barrier0() #[[ATTR7]]
; CHECK-NEXT:    [[I44:%.*]] = add nsw i32 [[I1647]], [[I661]]
; CHECK-NEXT:    [[I45:%.*]] = add nsw i32 [[I1550]], [[I661]]
; CHECK-NEXT:    [[I46:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I45]], i32 1023)
; CHECK-NEXT:    [[I47:%.*]] = icmp slt i32 [[I44]], 1024
; CHECK-NEXT:    br i1 [[I47]], label [[BB14_FROM_BB43]], label [[END:%.*]]
; CHECK:       bb14.from.bb43:
; CHECK-NEXT:    [[I44_BB14]] = phi i32 [ [[I44]], [[BB43]] ]
; CHECK-NEXT:    [[I46_BB14]] = phi i32 [ [[I46]], [[BB43]] ]
; CHECK-NEXT:    [[I17:%.*]] = zext i32 [[I46_BB14]] to i64
; CHECK-NEXT:    [[I18:%.*]] = add nsw i32 [[TID53]], [[I44_BB14]]
; CHECK-NEXT:    [[I19]] = sext i32 [[I18]] to i64
; CHECK-NEXT:    [[I20:%.*]] = icmp ugt i64 [[I19]], [[I17]]
; CHECK-NEXT:    br i1 [[I20]], label [[BB43]], label [[LOOP_COND]]
; CHECK:       end:
; CHECK-NEXT:    ret void
; CHECK:       ThreadExit:
; CHECK-NEXT:    call void asm sideeffect "exit
; CHECK-NEXT:    unreachable
;
;
; CHECK-LABEL: define weak_odr protected void @__omp_offloading_fd01_2a0317_daxpy_l22_contd_1(
; CHECK-SAME: ptr noalias noundef [[LAUNCH_ENV:%.*]], ptr noundef [[Y_BUF:%.*]], ptr noundef [[X_BUF:%.*]], i64 noundef [[A:%.*]]) local_unnamed_addr #[[ATTR2]] {
; CHECK-NEXT:  ContDispatchBB:
; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
; CHECK-NEXT:    [[TMP3:%.*]] = mul i32 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[GTID18:%.*]] = add i32 [[TMP0]], [[TMP3]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0:%.*]], ptr [[LAUNCH_ENV]], i32 0, i32 3
; CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP4]], align 8
; CHECK-NEXT:    [[CONTCOUNT_IN_PTR19:%.*]] = getelementptr inbounds i32, ptr [[TMP5]], i32 2
; CHECK-NEXT:    [[CONTCOUNT_IN20:%.*]] = load i32, ptr [[CONTCOUNT_IN_PTR19]], align 4
; CHECK-NEXT:    [[MASKTHREAD21:%.*]] = icmp ult i32 [[GTID18]], [[CONTCOUNT_IN20]]
; CHECK-NEXT:    br i1 [[MASKTHREAD21]], label [[CACHEREMAT1:%.*]], label [[THREADEXIT:%.*]]
; CHECK:       loop.cond:
; CHECK-NEXT:    [[NTID58:%.*]] = phi i32 [ [[NTID57:%.*]], [[BB14_FROM_BB43:%.*]] ], [ [[NTID_CACHE35:%.*]], [[CACHEREMAT1]] ]
; CHECK-NEXT:    [[TID54:%.*]] = phi i32 [ [[TID53:%.*]], [[BB14_FROM_BB43]] ], [ [[TID_CACHE33:%.*]], [[CACHEREMAT1]] ]
; CHECK-NEXT:    [[I1551:%.*]] = phi i32 [ [[I46_BB14:%.*]], [[BB14_FROM_BB43]] ], [ [[I15_CACHE31:%.*]], [[CACHEREMAT1]] ]
; CHECK-NEXT:    [[I1648:%.*]] = phi i32 [ [[I44_BB14:%.*]], [[BB14_FROM_BB43]] ], [ [[I16_CACHE29:%.*]], [[CACHEREMAT1]] ]
; CHECK-NEXT:    [[NCTAID44:%.*]] = phi i32 [ [[NCTAID43:%.*]], [[BB14_FROM_BB43]] ], [ [[NCTAID_CACHE25:%.*]], [[CACHEREMAT1]] ]
; CHECK-NEXT:    [[I:%.*]] = phi i64 [ [[I19:%.*]], [[BB14_FROM_BB43]] ], [ [[I41:%.*]], [[CACHEREMAT1]] ]
; CHECK-NEXT:    [[I_TRUNC:%.*]] = trunc i64 [[I]] to i32
; CHECK-NEXT:    [[Y_I_PTR:%.*]] = getelementptr inbounds double, ptr [[Y_BUF]], i64 [[I]]
; CHECK-NEXT:    [[Y_I:%.*]] = load double, ptr [[Y_I_PTR]], align 8, !tbaa [[TBAA21]]
; CHECK-NEXT:    [[COND:%.*]] = fcmp ogt double [[Y_I]], 2.300000e+00
; CHECK-NEXT:    [[X_I_PTR:%.*]] = getelementptr inbounds double, ptr [[X_BUF]], i64 [[I]]
; CHECK-NEXT:    br i1 [[COND]], label [[CACHESTORE0:%.*]], label [[CACHESTORE1:%.*]]
; CHECK:       CacheStore0:
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 3
; CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8
; CHECK-NEXT:    [[CONTCOUNT_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP7]], i32 0
; CHECK-NEXT:    [[CACHEIDX:%.*]] = atomicrmw add ptr [[CONTCOUNT_PTR]], i32 1 monotonic, align 4
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 4
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[TMP8]], align 8
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds ptr, ptr [[TMP9]], i32 0
; CHECK-NEXT:    [[CACHE_OUT_PTR:%.*]] = load ptr, ptr [[TMP10]], align 8
; CHECK-NEXT:    [[CACHECELL:%.*]] = getelementptr inbounds [[CACHE_CELL0:%.*]], ptr [[CACHE_OUT_PTR]], i32 [[CACHEIDX]]
; CHECK-NEXT:    [[NCTAID_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 0
; CHECK-NEXT:    store i32 [[NCTAID44]], ptr [[NCTAID_CACHEIDX]], align 4, !invariant.group [[META25]]
; CHECK-NEXT:    [[I_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 1
; CHECK-NEXT:    store i64 [[I]], ptr [[I_CACHEIDX]], align 8, !invariant.group [[META26]]
; CHECK-NEXT:    [[I16_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 2
; CHECK-NEXT:    store i32 [[I1648]], ptr [[I16_CACHEIDX]], align 4, !invariant.group [[META27]]
; CHECK-NEXT:    [[I15_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 3
; CHECK-NEXT:    store i32 [[I1551]], ptr [[I15_CACHEIDX]], align 4, !invariant.group [[META28]]
; CHECK-NEXT:    [[TID_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 4
; CHECK-NEXT:    store i32 [[TID54]], ptr [[TID_CACHEIDX]], align 4, !invariant.group [[META29]]
; CHECK-NEXT:    [[NTID_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 5
; CHECK-NEXT:    store i32 [[NTID58]], ptr [[NTID_CACHEIDX]], align 4, !invariant.group [[META30]]
; CHECK-NEXT:    br label [[THREADEXIT]]
; CHECK:       CacheStore1:
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 3
; CHECK-NEXT:    [[TMP12:%.*]] = load ptr, ptr [[TMP11]], align 8
; CHECK-NEXT:    [[CONTCOUNT_PTR8:%.*]] = getelementptr inbounds i32, ptr [[TMP12]], i32 1
; CHECK-NEXT:    [[CACHEIDX9:%.*]] = atomicrmw add ptr [[CONTCOUNT_PTR8]], i32 1 monotonic, align 4
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 4
; CHECK-NEXT:    [[TMP14:%.*]] = load ptr, ptr [[TMP13]], align 8
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds ptr, ptr [[TMP14]], i32 1
; CHECK-NEXT:    [[CACHE_OUT_PTR10:%.*]] = load ptr, ptr [[TMP15]], align 8
; CHECK-NEXT:    [[CACHECELL11:%.*]] = getelementptr inbounds [[CACHE_CELL1:%.*]], ptr [[CACHE_OUT_PTR10]], i32 [[CACHEIDX9]]
; CHECK-NEXT:    [[NCTAID_CACHEIDX12:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL11]], i32 0, i32 0
; CHECK-NEXT:    store i32 [[NCTAID44]], ptr [[NCTAID_CACHEIDX12]], align 4, !invariant.group [[META31]]
; CHECK-NEXT:    [[I_CACHEIDX13:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL11]], i32 0, i32 1
; CHECK-NEXT:    store i64 [[I]], ptr [[I_CACHEIDX13]], align 8, !invariant.group [[META32]]
; CHECK-NEXT:    [[I16_CACHEIDX14:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL11]], i32 0, i32 2
; CHECK-NEXT:    store i32 [[I1648]], ptr [[I16_CACHEIDX14]], align 4, !invariant.group [[META33]]
; CHECK-NEXT:    [[I15_CACHEIDX15:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL11]], i32 0, i32 3
; CHECK-NEXT:    store i32 [[I1551]], ptr [[I15_CACHEIDX15]], align 4, !invariant.group [[META34]]
; CHECK-NEXT:    [[TID_CACHEIDX16:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL11]], i32 0, i32 4
; CHECK-NEXT:    store i32 [[TID54]], ptr [[TID_CACHEIDX16]], align 4, !invariant.group [[META35]]
; CHECK-NEXT:    [[NTID_CACHEIDX17:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL11]], i32 0, i32 5
; CHECK-NEXT:    store i32 [[NTID58]], ptr [[NTID_CACHEIDX17]], align 4, !invariant.group [[META36]]
; CHECK-NEXT:    br label [[THREADEXIT]]
; CHECK:       CacheRemat1:
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 4
; CHECK-NEXT:    [[TMP17:%.*]] = load ptr, ptr [[TMP16]], align 8
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr inbounds ptr, ptr [[TMP17]], i32 3
; CHECK-NEXT:    [[CACHE_IN_PTR22:%.*]] = load ptr, ptr [[TMP18]], align 8
; CHECK-NEXT:    [[CACHECELL23:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHE_IN_PTR22]], i32 [[GTID18]]
; CHECK-NEXT:    [[NCTAID_CACHEIDX24:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL23]], i32 0, i32 0
; CHECK-NEXT:    [[NCTAID_CACHE25]] = load i32, ptr [[NCTAID_CACHEIDX24]], align 4, !invariant.group [[META31]]
; CHECK-NEXT:    [[I_CACHEIDX26:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL23]], i32 0, i32 1
; CHECK-NEXT:    [[I_CACHE27:%.*]] = load i64, ptr [[I_CACHEIDX26]], align 8, !invariant.group [[META32]]
; CHECK-NEXT:    [[I16_CACHEIDX28:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL23]], i32 0, i32 2
; CHECK-NEXT:    [[I16_CACHE29]] = load i32, ptr [[I16_CACHEIDX28]], align 4, !invariant.group [[META33]]
; CHECK-NEXT:    [[I15_CACHEIDX30:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL23]], i32 0, i32 3
; CHECK-NEXT:    [[I15_CACHE31]] = load i32, ptr [[I15_CACHEIDX30]], align 4, !invariant.group [[META34]]
; CHECK-NEXT:    [[TID_CACHEIDX32:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL23]], i32 0, i32 4
; CHECK-NEXT:    [[TID_CACHE33]] = load i32, ptr [[TID_CACHEIDX32]], align 4, !invariant.group [[META35]]
; CHECK-NEXT:    [[NTID_CACHEIDX34:%.*]] = getelementptr inbounds [[CACHE_CELL1]], ptr [[CACHECELL23]], i32 0, i32 5
; CHECK-NEXT:    [[NTID_CACHE35]] = load i32, ptr [[NTID_CACHEIDX34]], align 4, !invariant.group [[META36]]
; CHECK-NEXT:    [[I6_RECOMPUTE36:%.*]] = shl nsw i32 [[NCTAID_CACHE25]], 10
; CHECK-NEXT:    [[A_DOUBLE_RECOMPUTE37:%.*]] = bitcast i64 [[A]] to double
; CHECK-NEXT:    [[I_TRUNC_RECOMPUTE38:%.*]] = trunc i64 [[I_CACHE27]] to i32
; CHECK-NEXT:    [[I17_RECOMPUTE39:%.*]] = zext i32 [[I15_CACHE31]] to i64
; CHECK-NEXT:    [[X_I_PTR_RECOMPUTE40:%.*]] = getelementptr inbounds double, ptr [[X_BUF]], i64 [[I_CACHE27]]
; CHECK-NEXT:    [[Y_I_PTR_RECOMPUTE41:%.*]] = getelementptr inbounds double, ptr [[Y_BUF]], i64 [[I_CACHE27]]
; CHECK-NEXT:    [[X_I1:%.*]] = load double, ptr [[X_I_PTR_RECOMPUTE40]], align 8, !tbaa [[TBAA21]]
; CHECK-NEXT:    [[Y_I2:%.*]] = load double, ptr [[Y_I_PTR_RECOMPUTE41]], align 8, !tbaa [[TBAA21]]
; CHECK-NEXT:    [[FMA:%.*]] = tail call double @llvm.fmuladd.f64(double [[A_DOUBLE_RECOMPUTE37]], double [[X_I1]], double [[Y_I2]])
; CHECK-NEXT:    store double [[FMA]], ptr [[Y_I_PTR_RECOMPUTE41]], align 8, !tbaa [[TBAA21]]
; CHECK-NEXT:    [[I40:%.*]] = add nsw i32 [[NTID_CACHE35]], [[I_TRUNC_RECOMPUTE38]]
; CHECK-NEXT:    [[I41]] = sext i32 [[I40]] to i64
; CHECK-NEXT:    [[I42:%.*]] = icmp ugt i64 [[I41]], [[I17_RECOMPUTE39]]
; CHECK-NEXT:    br i1 [[I42]], label [[BB43:%.*]], label [[LOOP_COND:%.*]]
; CHECK:       bb43:
; CHECK-NEXT:    [[I661:%.*]] = phi i32 [ [[I6_RECOMPUTE36]], [[CACHEREMAT1]] ], [ [[I661]], [[BB14_FROM_BB43]] ]
; CHECK-NEXT:    [[NTID57]] = phi i32 [ [[NTID_CACHE35]], [[CACHEREMAT1]] ], [ [[NTID57]], [[BB14_FROM_BB43]] ]
; CHECK-NEXT:    [[TID53]] = phi i32 [ [[TID_CACHE33]], [[CACHEREMAT1]] ], [ [[TID53]], [[BB14_FROM_BB43]] ]
; CHECK-NEXT:    [[I1550:%.*]] = phi i32 [ [[I15_CACHE31]], [[CACHEREMAT1]] ], [ [[I46_BB14]], [[BB14_FROM_BB43]] ]
; CHECK-NEXT:    [[I1647:%.*]] = phi i32 [ [[I16_CACHE29]], [[CACHEREMAT1]] ], [ [[I44_BB14]], [[BB14_FROM_BB43]] ]
; CHECK-NEXT:    [[NCTAID43]] = phi i32 [ [[NCTAID_CACHE25]], [[CACHEREMAT1]] ], [ [[NCTAID43]], [[BB14_FROM_BB43]] ]
; CHECK-NEXT:    tail call void @llvm.nvvm.barrier0() #[[ATTR7]]
; CHECK-NEXT:    [[I44:%.*]] = add nsw i32 [[I1647]], [[I661]]
; CHECK-NEXT:    [[I45:%.*]] = add nsw i32 [[I1550]], [[I661]]
; CHECK-NEXT:    [[I46:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I45]], i32 1023)
; CHECK-NEXT:    [[I47:%.*]] = icmp slt i32 [[I44]], 1024
; CHECK-NEXT:    br i1 [[I47]], label [[BB14_FROM_BB43]], label [[END:%.*]]
; CHECK:       bb14.from.bb43:
; CHECK-NEXT:    [[I44_BB14]] = phi i32 [ [[I44]], [[BB43]] ]
; CHECK-NEXT:    [[I46_BB14]] = phi i32 [ [[I46]], [[BB43]] ]
; CHECK-NEXT:    [[I17:%.*]] = zext i32 [[I46_BB14]] to i64
; CHECK-NEXT:    [[I18:%.*]] = add nsw i32 [[TID53]], [[I44_BB14]]
; CHECK-NEXT:    [[I19]] = sext i32 [[I18]] to i64
; CHECK-NEXT:    [[I20:%.*]] = icmp ugt i64 [[I19]], [[I17]]
; CHECK-NEXT:    br i1 [[I20]], label [[BB43]], label [[LOOP_COND]]
; CHECK:       end:
; CHECK-NEXT:    ret void
; CHECK:       ThreadExit:
; CHECK-NEXT:    call void asm sideeffect "exit
; CHECK-NEXT:    unreachable
;
;.
; CHECK: [[RNG18]] = !{i32 1, i32 0}
; CHECK: [[RNG19]] = !{i32 0, i32 -1}
; CHECK: [[RNG20]] = !{i32 -2147483648, i32 1024}
; CHECK: [[TBAA21]] = !{[[META22:![0-9]+]], [[META22]], i64 0}
; CHECK: [[META22]] = !{!"double", [[META23:![0-9]+]], i64 0}
; CHECK: [[META23]] = !{!"omnipotent char", [[META24:![0-9]+]], i64 0}
; CHECK: [[META24]] = !{!"Simple C/C++ TBAA"}
; CHECK: [[META25]] = distinct !{}
; CHECK: [[META26]] = distinct !{}
; CHECK: [[META27]] = distinct !{}
; CHECK: [[META28]] = distinct !{}
; CHECK: [[META29]] = distinct !{}
; CHECK: [[META30]] = distinct !{}
; CHECK: [[META31]] = distinct !{}
; CHECK: [[META32]] = distinct !{}
; CHECK: [[META33]] = distinct !{}
; CHECK: [[META34]] = distinct !{}
; CHECK: [[META35]] = distinct !{}
; CHECK: [[META36]] = distinct !{}
;.
