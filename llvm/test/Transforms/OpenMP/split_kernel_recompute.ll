; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --include-generated-funcs --version 4
; RUN: opt < %s -S -passes="openmp-opt-postlink,ipsccp,simplifycfg" --split-kernel-remat-mode=cache | FileCheck %s --check-prefix=CHECK-CACHE
; RUN: opt < %s -S -passes="openmp-opt-postlink,ipsccp,simplifycfg" --split-kernel-remat-mode=recompute | FileCheck %s --check-prefix=CHECK-RECOMPUTE
; RUN: opt < %s -S -passes="openmp-opt-postlink,ipsccp,simplifycfg" --split-kernel-remat-mode=mincut | FileCheck %s --check-prefix=CHECK-MINCUT

target triple = "nvptx64"

%struct.ident_t = type { i32, i32, i32, i32, ptr }
%struct.KernelEnvironmentTy = type { %struct.ConfigurationEnvironmentTy, ptr, ptr }
%struct.ConfigurationEnvironmentTy = type { i8, i8, i8, i32, i32, i32, i32, i32, i32, i32, ptr }
%struct.KernelLaunchEnvironmentTy = type { i32, i32, ptr, i32 }

@test_kernel_environment = weak_odr protected local_unnamed_addr constant %struct.KernelEnvironmentTy { %struct.ConfigurationEnvironmentTy { i8 0, i8 0, i8 2, i32 1, i32 512, i32 1, i32 1, i32 0, i32 0, i32 1, ptr null }, ptr null, ptr null }

declare void @__ompx_split()

declare i32 @__kmpc_target_init(ptr, ptr)
declare void @__kmpc_target_deinit()

define void @test(ptr %launch_env, ptr %tid_addr, ptr %ptr, ptr %dyn) "kernel" "omp_target_thread_limit"="32" "omp_target_num_teams"="1" {
  entry:
    %i = call i32 @__kmpc_target_init(ptr @test_kernel_environment, ptr %dyn)
    %tid = load i64, ptr %tid_addr
    %arrayidx = getelementptr inbounds double, ptr %ptr, i64 %tid
    %val = load double, ptr %arrayidx
    %sub = fsub double %val, 1.0
    %add = fadd double %val, 2.0
    %mul = fmul double %val, 3.0
    %div = fmul double %val, 4.0
    %cmp = icmp ult i64 0, %tid
    br i1 %cmp, label %if, label %end
  if:
    call void @__ompx_split()
    %res1 = fmul double %sub, %add
    %res2 = fmul double %res1, %mul
    %res3 = fmul double %res2, %div
    store double %res3, ptr %arrayidx
    br label %end
  end:
    %mul1 = fmul double %val, %val
    store double %mul1, ptr %arrayidx
    call void @__kmpc_target_deinit()
    ret void
}

!llvm.module.flags = !{!3, !4}

!3 = !{i32 7, !"openmp", i32 51}
!4 = !{i32 7, !"openmp-device", i32 51}


; CHECK: define void @test(ptr %launch_env, ptr %tid_addr, ptr %ptr, ptr %dyn)
; CHECK-NEXT: entry:
; CHECK-NEXT:   %i = call i32 @__kmpc_target_init(ptr @test_kernel_environment, ptr %dyn)
; CHECK-NEXT:   %tid = load i64, ptr %tid_addr
; CHECK-NEXT:   %arrayidx = getelementptr inbounds double, ptr %ptr, i64 %tid
; CHECK-NEXT:   %val = load double, ptr %arrayidx
; CHECK-NEXT:   %sub = fsub double %val, 1.000000e+00
; CHECK-NEXT:   %add = fadd double %val, 2.000000e+00
; CHECK-NEXT:   %mul = fmul double %val, 3.000000e+00
; CHECK-NEXT:   %div = fmul double %val, 4.000000e+00
; CHECK-NEXT:   %cmp = icmp ult i64 0, %tid
; CHECK-NEXT:   br i1 %cmp, label %CacheStore, label %end
; CHECK: end:                                              ; preds = %entry
; CHECK-NEXT:   %mul1 = fmul double %val, %val
; CHECK-NEXT:   store double %mul1, ptr %arrayidx
; CHECK-NEXT:   call void @__kmpc_target_deinit()
; CHECK-NEXT:   ret void
; CHECK-NEXT: }
; CHECK: define void @test_contd_0(ptr %launch_env, ptr %tid_addr, ptr %ptr, ptr %dyn)
; CHECK-NEXT: entry:
; CHECK-NEXT:   %0 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
; CHECK-NEXT:   %1 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
; CHECK-NEXT:   %2 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
; CHECK-NEXT:   %3 = mul i32 %1, %2
; CHECK-NEXT:   %gtid = add i32 %0, %3
; CHECK-NEXT:   %4 = getelementptr inbounds %struct.KernelLaunchEnvironmentTy.0, ptr %launch_env, i32 0, i32 3
; CHECK-NEXT:   %5 = load ptr, ptr %4
; CHECK-NEXT:   %contcount.in.ptr = getelementptr inbounds i32, ptr %5, i32 1
; CHECK-NEXT:   %contcount.in = load i32, ptr %contcount.in.ptr
; CHECK-NEXT:   %6 = icmp ult i32 %gtid, %contcount.in
; CHECK-NEXT:   br i1 %6, label %CacheRemat, label %ThreadExit
; CHECK: ThreadExit:                                       ; preds = %entry
; CHECK-NEXT:   call void asm sideeffect "exit;", ""()
; CHECK-NEXT:   unreachable
; CHECK-NEXT: }
; CHECK-CACHE-LABEL: define void @test(
; CHECK-CACHE-SAME: ptr [[LAUNCH_ENV:%.*]], ptr [[TID_ADDR:%.*]], ptr [[PTR:%.*]], ptr [[DYN:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-CACHE-NEXT:  ContDispatchBB:
; CHECK-CACHE-NEXT:    [[I:%.*]] = call i32 @__kmpc_target_init(ptr @test_kernel_environment, ptr [[DYN]])
; CHECK-CACHE-NEXT:    [[TID:%.*]] = load i64, ptr [[TID_ADDR]], align 8
; CHECK-CACHE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, ptr [[PTR]], i64 [[TID]]
; CHECK-CACHE-NEXT:    [[VAL:%.*]] = load double, ptr [[ARRAYIDX]], align 8
; CHECK-CACHE-NEXT:    [[SUB:%.*]] = fsub double [[VAL]], 1.000000e+00
; CHECK-CACHE-NEXT:    [[ADD:%.*]] = fadd double [[VAL]], 2.000000e+00
; CHECK-CACHE-NEXT:    [[MUL:%.*]] = fmul double [[VAL]], 3.000000e+00
; CHECK-CACHE-NEXT:    [[DIV:%.*]] = fmul double [[VAL]], 4.000000e+00
; CHECK-CACHE-NEXT:    [[CMP:%.*]] = icmp ult i64 0, [[TID]]
; CHECK-CACHE-NEXT:    br i1 [[CMP]], label [[CACHESTORE0:%.*]], label [[END:%.*]]
; CHECK-CACHE:       CacheStore0:
; CHECK-CACHE-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0:%.*]], ptr [[LAUNCH_ENV]], i32 0, i32 3
; CHECK-CACHE-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8
; CHECK-CACHE-NEXT:    [[CONTCOUNT_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 0
; CHECK-CACHE-NEXT:    [[CACHEIDX:%.*]] = atomicrmw add ptr [[CONTCOUNT_PTR]], i32 1 monotonic, align 4
; CHECK-CACHE-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 4
; CHECK-CACHE-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP2]], align 8
; CHECK-CACHE-NEXT:    [[TMP4:%.*]] = getelementptr inbounds ptr, ptr [[TMP3]], i32 0
; CHECK-CACHE-NEXT:    [[CACHE_OUT_PTR:%.*]] = load ptr, ptr [[TMP4]], align 8
; CHECK-CACHE-NEXT:    [[CACHECELL:%.*]] = getelementptr inbounds [[CACHE_CELL0:%.*]], ptr [[CACHE_OUT_PTR]], i32 [[CACHEIDX]]
; CHECK-CACHE-NEXT:    [[ARRAYIDX_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 0
; CHECK-CACHE-NEXT:    store ptr [[ARRAYIDX]], ptr [[ARRAYIDX_CACHEIDX]], align 8
; CHECK-CACHE-NEXT:    [[VAL_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 1
; CHECK-CACHE-NEXT:    store double [[VAL]], ptr [[VAL_CACHEIDX]], align 8
; CHECK-CACHE-NEXT:    [[SUB_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 2
; CHECK-CACHE-NEXT:    store double [[SUB]], ptr [[SUB_CACHEIDX]], align 8
; CHECK-CACHE-NEXT:    [[ADD_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 3
; CHECK-CACHE-NEXT:    store double [[ADD]], ptr [[ADD_CACHEIDX]], align 8
; CHECK-CACHE-NEXT:    [[MUL_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 4
; CHECK-CACHE-NEXT:    store double [[MUL]], ptr [[MUL_CACHEIDX]], align 8
; CHECK-CACHE-NEXT:    [[DIV_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 5
; CHECK-CACHE-NEXT:    store double [[DIV]], ptr [[DIV_CACHEIDX]], align 8
; CHECK-CACHE-NEXT:    call void asm sideeffect "exit
; CHECK-CACHE-NEXT:    unreachable
; CHECK-CACHE:       end:
; CHECK-CACHE-NEXT:    [[MUL1:%.*]] = fmul double [[VAL]], [[VAL]]
; CHECK-CACHE-NEXT:    store double [[MUL1]], ptr [[ARRAYIDX]], align 8
; CHECK-CACHE-NEXT:    call void @__kmpc_target_deinit()
; CHECK-CACHE-NEXT:    ret void
;
;
; CHECK-CACHE-LABEL: define void @test_contd_0(
; CHECK-CACHE-SAME: ptr [[LAUNCH_ENV:%.*]], ptr [[TID_ADDR:%.*]], ptr [[PTR:%.*]], ptr [[DYN:%.*]]) #[[ATTR0]] {
; CHECK-CACHE-NEXT:  ContDispatchBB:
; CHECK-CACHE-NEXT:    [[TMP0:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
; CHECK-CACHE-NEXT:    [[TMP1:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
; CHECK-CACHE-NEXT:    [[TMP2:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
; CHECK-CACHE-NEXT:    [[TMP3:%.*]] = mul i32 [[TMP1]], [[TMP2]]
; CHECK-CACHE-NEXT:    [[GTID:%.*]] = add i32 [[TMP0]], [[TMP3]]
; CHECK-CACHE-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0:%.*]], ptr [[LAUNCH_ENV]], i32 0, i32 3
; CHECK-CACHE-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP4]], align 8
; CHECK-CACHE-NEXT:    [[CONTCOUNT_IN_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP5]], i32 1
; CHECK-CACHE-NEXT:    [[CONTCOUNT_IN:%.*]] = load i32, ptr [[CONTCOUNT_IN_PTR]], align 4
; CHECK-CACHE-NEXT:    [[MASKTHREAD:%.*]] = icmp ult i32 [[GTID]], [[CONTCOUNT_IN]]
; CHECK-CACHE-NEXT:    br i1 [[MASKTHREAD]], label [[CACHEREMAT0:%.*]], label [[THREADEXIT:%.*]]
; CHECK-CACHE:       CacheRemat0:
; CHECK-CACHE-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 4
; CHECK-CACHE-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8
; CHECK-CACHE-NEXT:    [[TMP8:%.*]] = getelementptr inbounds ptr, ptr [[TMP7]], i32 1
; CHECK-CACHE-NEXT:    [[CACHE_IN_PTR:%.*]] = load ptr, ptr [[TMP8]], align 8
; CHECK-CACHE-NEXT:    [[CACHECELL1:%.*]] = getelementptr inbounds [[CACHE_CELL0:%.*]], ptr [[CACHE_IN_PTR]], i32 [[GTID]]
; CHECK-CACHE-NEXT:    [[ARRAYIDX_CACHEIDX2:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL1]], i32 0, i32 0
; CHECK-CACHE-NEXT:    [[ARRAYIDX_CACHE:%.*]] = load ptr, ptr [[ARRAYIDX_CACHEIDX2]], align 8
; CHECK-CACHE-NEXT:    [[VAL_CACHEIDX3:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL1]], i32 0, i32 1
; CHECK-CACHE-NEXT:    [[VAL_CACHE:%.*]] = load double, ptr [[VAL_CACHEIDX3]], align 8
; CHECK-CACHE-NEXT:    [[SUB_CACHEIDX4:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL1]], i32 0, i32 2
; CHECK-CACHE-NEXT:    [[SUB_CACHE:%.*]] = load double, ptr [[SUB_CACHEIDX4]], align 8
; CHECK-CACHE-NEXT:    [[ADD_CACHEIDX5:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL1]], i32 0, i32 3
; CHECK-CACHE-NEXT:    [[ADD_CACHE:%.*]] = load double, ptr [[ADD_CACHEIDX5]], align 8
; CHECK-CACHE-NEXT:    [[MUL_CACHEIDX6:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL1]], i32 0, i32 4
; CHECK-CACHE-NEXT:    [[MUL_CACHE:%.*]] = load double, ptr [[MUL_CACHEIDX6]], align 8
; CHECK-CACHE-NEXT:    [[DIV_CACHEIDX7:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL1]], i32 0, i32 5
; CHECK-CACHE-NEXT:    [[DIV_CACHE:%.*]] = load double, ptr [[DIV_CACHEIDX7]], align 8
; CHECK-CACHE-NEXT:    [[RES1:%.*]] = fmul double [[SUB_CACHE]], [[ADD_CACHE]]
; CHECK-CACHE-NEXT:    [[RES2:%.*]] = fmul double [[RES1]], [[MUL_CACHE]]
; CHECK-CACHE-NEXT:    [[RES3:%.*]] = fmul double [[RES2]], [[DIV_CACHE]]
; CHECK-CACHE-NEXT:    store double [[RES3]], ptr [[ARRAYIDX_CACHE]], align 8
; CHECK-CACHE-NEXT:    [[MUL1:%.*]] = fmul double [[VAL_CACHE]], [[VAL_CACHE]]
; CHECK-CACHE-NEXT:    store double [[MUL1]], ptr [[ARRAYIDX_CACHE]], align 8
; CHECK-CACHE-NEXT:    call void @__kmpc_target_deinit()
; CHECK-CACHE-NEXT:    ret void
; CHECK-CACHE:       ThreadExit:
; CHECK-CACHE-NEXT:    call void asm sideeffect "exit
; CHECK-CACHE-NEXT:    unreachable
;
;
; CHECK-RECOMPUTE-LABEL: define void @test(
; CHECK-RECOMPUTE-SAME: ptr [[LAUNCH_ENV:%.*]], ptr [[TID_ADDR:%.*]], ptr [[PTR:%.*]], ptr [[DYN:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-RECOMPUTE-NEXT:  ContDispatchBB:
; CHECK-RECOMPUTE-NEXT:    [[I:%.*]] = call i32 @__kmpc_target_init(ptr @test_kernel_environment, ptr [[DYN]])
; CHECK-RECOMPUTE-NEXT:    [[TID:%.*]] = load i64, ptr [[TID_ADDR]], align 8
; CHECK-RECOMPUTE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, ptr [[PTR]], i64 [[TID]]
; CHECK-RECOMPUTE-NEXT:    [[VAL:%.*]] = load double, ptr [[ARRAYIDX]], align 8
; CHECK-RECOMPUTE-NEXT:    [[SUB:%.*]] = fsub double [[VAL]], 1.000000e+00
; CHECK-RECOMPUTE-NEXT:    [[ADD:%.*]] = fadd double [[VAL]], 2.000000e+00
; CHECK-RECOMPUTE-NEXT:    [[MUL:%.*]] = fmul double [[VAL]], 3.000000e+00
; CHECK-RECOMPUTE-NEXT:    [[DIV:%.*]] = fmul double [[VAL]], 4.000000e+00
; CHECK-RECOMPUTE-NEXT:    [[CMP:%.*]] = icmp ult i64 0, [[TID]]
; CHECK-RECOMPUTE-NEXT:    br i1 [[CMP]], label [[CACHESTORE0:%.*]], label [[END:%.*]]
; CHECK-RECOMPUTE:       CacheStore0:
; CHECK-RECOMPUTE-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0:%.*]], ptr [[LAUNCH_ENV]], i32 0, i32 3
; CHECK-RECOMPUTE-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8
; CHECK-RECOMPUTE-NEXT:    [[CONTCOUNT_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 0
; CHECK-RECOMPUTE-NEXT:    [[CACHEIDX:%.*]] = atomicrmw add ptr [[CONTCOUNT_PTR]], i32 1 monotonic, align 4
; CHECK-RECOMPUTE-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 4
; CHECK-RECOMPUTE-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP2]], align 8
; CHECK-RECOMPUTE-NEXT:    [[TMP4:%.*]] = getelementptr inbounds ptr, ptr [[TMP3]], i32 0
; CHECK-RECOMPUTE-NEXT:    [[CACHE_OUT_PTR:%.*]] = load ptr, ptr [[TMP4]], align 8
; CHECK-RECOMPUTE-NEXT:    [[CACHECELL:%.*]] = getelementptr inbounds [[CACHE_CELL0:%.*]], ptr [[CACHE_OUT_PTR]], i32 [[CACHEIDX]]
; CHECK-RECOMPUTE-NEXT:    [[VAL_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 0
; CHECK-RECOMPUTE-NEXT:    store double [[VAL]], ptr [[VAL_CACHEIDX]], align 8
; CHECK-RECOMPUTE-NEXT:    [[TID_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 1
; CHECK-RECOMPUTE-NEXT:    store i64 [[TID]], ptr [[TID_CACHEIDX]], align 8
; CHECK-RECOMPUTE-NEXT:    call void asm sideeffect "exit
; CHECK-RECOMPUTE-NEXT:    unreachable
; CHECK-RECOMPUTE:       end:
; CHECK-RECOMPUTE-NEXT:    [[MUL1:%.*]] = fmul double [[VAL]], [[VAL]]
; CHECK-RECOMPUTE-NEXT:    store double [[MUL1]], ptr [[ARRAYIDX]], align 8
; CHECK-RECOMPUTE-NEXT:    call void @__kmpc_target_deinit()
; CHECK-RECOMPUTE-NEXT:    ret void
;
;
; CHECK-RECOMPUTE-LABEL: define void @test_contd_0(
; CHECK-RECOMPUTE-SAME: ptr [[LAUNCH_ENV:%.*]], ptr [[TID_ADDR:%.*]], ptr [[PTR:%.*]], ptr [[DYN:%.*]]) #[[ATTR0]] {
; CHECK-RECOMPUTE-NEXT:  ContDispatchBB:
; CHECK-RECOMPUTE-NEXT:    [[TMP0:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
; CHECK-RECOMPUTE-NEXT:    [[TMP1:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
; CHECK-RECOMPUTE-NEXT:    [[TMP2:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
; CHECK-RECOMPUTE-NEXT:    [[TMP3:%.*]] = mul i32 [[TMP1]], [[TMP2]]
; CHECK-RECOMPUTE-NEXT:    [[GTID:%.*]] = add i32 [[TMP0]], [[TMP3]]
; CHECK-RECOMPUTE-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0:%.*]], ptr [[LAUNCH_ENV]], i32 0, i32 3
; CHECK-RECOMPUTE-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP4]], align 8
; CHECK-RECOMPUTE-NEXT:    [[CONTCOUNT_IN_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP5]], i32 1
; CHECK-RECOMPUTE-NEXT:    [[CONTCOUNT_IN:%.*]] = load i32, ptr [[CONTCOUNT_IN_PTR]], align 4
; CHECK-RECOMPUTE-NEXT:    [[MASKTHREAD:%.*]] = icmp ult i32 [[GTID]], [[CONTCOUNT_IN]]
; CHECK-RECOMPUTE-NEXT:    br i1 [[MASKTHREAD]], label [[CACHEREMAT0:%.*]], label [[THREADEXIT:%.*]]
; CHECK-RECOMPUTE:       CacheRemat0:
; CHECK-RECOMPUTE-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 4
; CHECK-RECOMPUTE-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8
; CHECK-RECOMPUTE-NEXT:    [[TMP8:%.*]] = getelementptr inbounds ptr, ptr [[TMP7]], i32 1
; CHECK-RECOMPUTE-NEXT:    [[CACHE_IN_PTR:%.*]] = load ptr, ptr [[TMP8]], align 8
; CHECK-RECOMPUTE-NEXT:    [[CACHECELL1:%.*]] = getelementptr inbounds [[CACHE_CELL0:%.*]], ptr [[CACHE_IN_PTR]], i32 [[GTID]]
; CHECK-RECOMPUTE-NEXT:    [[VAL_CACHEIDX2:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL1]], i32 0, i32 0
; CHECK-RECOMPUTE-NEXT:    [[VAL_CACHE:%.*]] = load double, ptr [[VAL_CACHEIDX2]], align 8
; CHECK-RECOMPUTE-NEXT:    [[TID_CACHEIDX3:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL1]], i32 0, i32 1
; CHECK-RECOMPUTE-NEXT:    [[TID_CACHE:%.*]] = load i64, ptr [[TID_CACHEIDX3]], align 8
; CHECK-RECOMPUTE-NEXT:    [[ARRAYIDX_RECOMPUTE:%.*]] = getelementptr inbounds double, ptr [[PTR]], i64 [[TID_CACHE]]
; CHECK-RECOMPUTE-NEXT:    [[SUB_RECOMPUTE:%.*]] = fsub double [[VAL_CACHE]], 1.000000e+00
; CHECK-RECOMPUTE-NEXT:    [[ADD_RECOMPUTE:%.*]] = fadd double [[VAL_CACHE]], 2.000000e+00
; CHECK-RECOMPUTE-NEXT:    [[MUL_RECOMPUTE:%.*]] = fmul double [[VAL_CACHE]], 3.000000e+00
; CHECK-RECOMPUTE-NEXT:    [[DIV_RECOMPUTE:%.*]] = fmul double [[VAL_CACHE]], 4.000000e+00
; CHECK-RECOMPUTE-NEXT:    [[RES1:%.*]] = fmul double [[SUB_RECOMPUTE]], [[ADD_RECOMPUTE]]
; CHECK-RECOMPUTE-NEXT:    [[RES2:%.*]] = fmul double [[RES1]], [[MUL_RECOMPUTE]]
; CHECK-RECOMPUTE-NEXT:    [[RES3:%.*]] = fmul double [[RES2]], [[DIV_RECOMPUTE]]
; CHECK-RECOMPUTE-NEXT:    store double [[RES3]], ptr [[ARRAYIDX_RECOMPUTE]], align 8
; CHECK-RECOMPUTE-NEXT:    [[MUL1:%.*]] = fmul double [[VAL_CACHE]], [[VAL_CACHE]]
; CHECK-RECOMPUTE-NEXT:    store double [[MUL1]], ptr [[ARRAYIDX_RECOMPUTE]], align 8
; CHECK-RECOMPUTE-NEXT:    call void @__kmpc_target_deinit()
; CHECK-RECOMPUTE-NEXT:    ret void
; CHECK-RECOMPUTE:       ThreadExit:
; CHECK-RECOMPUTE-NEXT:    call void asm sideeffect "exit
; CHECK-RECOMPUTE-NEXT:    unreachable
;
;
; CHECK-MINCUT-LABEL: define void @test(
; CHECK-MINCUT-SAME: ptr [[LAUNCH_ENV:%.*]], ptr [[TID_ADDR:%.*]], ptr [[PTR:%.*]], ptr [[DYN:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-MINCUT-NEXT:  ContDispatchBB:
; CHECK-MINCUT-NEXT:    [[I:%.*]] = call i32 @__kmpc_target_init(ptr @test_kernel_environment, ptr [[DYN]])
; CHECK-MINCUT-NEXT:    [[TID:%.*]] = load i64, ptr [[TID_ADDR]], align 8
; CHECK-MINCUT-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, ptr [[PTR]], i64 [[TID]]
; CHECK-MINCUT-NEXT:    [[VAL:%.*]] = load double, ptr [[ARRAYIDX]], align 8
; CHECK-MINCUT-NEXT:    [[SUB:%.*]] = fsub double [[VAL]], 1.000000e+00
; CHECK-MINCUT-NEXT:    [[ADD:%.*]] = fadd double [[VAL]], 2.000000e+00
; CHECK-MINCUT-NEXT:    [[MUL:%.*]] = fmul double [[VAL]], 3.000000e+00
; CHECK-MINCUT-NEXT:    [[DIV:%.*]] = fmul double [[VAL]], 4.000000e+00
; CHECK-MINCUT-NEXT:    [[CMP:%.*]] = icmp ult i64 0, [[TID]]
; CHECK-MINCUT-NEXT:    br i1 [[CMP]], label [[CACHESTORE0:%.*]], label [[END:%.*]]
; CHECK-MINCUT:       CacheStore0:
; CHECK-MINCUT-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0:%.*]], ptr [[LAUNCH_ENV]], i32 0, i32 3
; CHECK-MINCUT-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8
; CHECK-MINCUT-NEXT:    [[CONTCOUNT_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 0
; CHECK-MINCUT-NEXT:    [[CACHEIDX:%.*]] = atomicrmw add ptr [[CONTCOUNT_PTR]], i32 1 monotonic, align 4
; CHECK-MINCUT-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 4
; CHECK-MINCUT-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP2]], align 8
; CHECK-MINCUT-NEXT:    [[TMP4:%.*]] = getelementptr inbounds ptr, ptr [[TMP3]], i32 0
; CHECK-MINCUT-NEXT:    [[CACHE_OUT_PTR:%.*]] = load ptr, ptr [[TMP4]], align 8
; CHECK-MINCUT-NEXT:    [[CACHECELL:%.*]] = getelementptr inbounds [[CACHE_CELL0:%.*]], ptr [[CACHE_OUT_PTR]], i32 [[CACHEIDX]]
; CHECK-MINCUT-NEXT:    [[ARRAYIDX_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 0
; CHECK-MINCUT-NEXT:    store ptr [[ARRAYIDX]], ptr [[ARRAYIDX_CACHEIDX]], align 8
; CHECK-MINCUT-NEXT:    [[VAL_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 1
; CHECK-MINCUT-NEXT:    store double [[VAL]], ptr [[VAL_CACHEIDX]], align 8
; CHECK-MINCUT-NEXT:    call void asm sideeffect "exit
; CHECK-MINCUT-NEXT:    unreachable
; CHECK-MINCUT:       end:
; CHECK-MINCUT-NEXT:    [[MUL1:%.*]] = fmul double [[VAL]], [[VAL]]
; CHECK-MINCUT-NEXT:    store double [[MUL1]], ptr [[ARRAYIDX]], align 8
; CHECK-MINCUT-NEXT:    call void @__kmpc_target_deinit()
; CHECK-MINCUT-NEXT:    ret void
;
;
; CHECK-MINCUT-LABEL: define void @test_contd_0(
; CHECK-MINCUT-SAME: ptr [[LAUNCH_ENV:%.*]], ptr [[TID_ADDR:%.*]], ptr [[PTR:%.*]], ptr [[DYN:%.*]]) #[[ATTR0]] {
; CHECK-MINCUT-NEXT:  ContDispatchBB:
; CHECK-MINCUT-NEXT:    [[TMP0:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
; CHECK-MINCUT-NEXT:    [[TMP1:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
; CHECK-MINCUT-NEXT:    [[TMP2:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
; CHECK-MINCUT-NEXT:    [[TMP3:%.*]] = mul i32 [[TMP1]], [[TMP2]]
; CHECK-MINCUT-NEXT:    [[GTID:%.*]] = add i32 [[TMP0]], [[TMP3]]
; CHECK-MINCUT-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0:%.*]], ptr [[LAUNCH_ENV]], i32 0, i32 3
; CHECK-MINCUT-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP4]], align 8
; CHECK-MINCUT-NEXT:    [[CONTCOUNT_IN_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP5]], i32 1
; CHECK-MINCUT-NEXT:    [[CONTCOUNT_IN:%.*]] = load i32, ptr [[CONTCOUNT_IN_PTR]], align 4
; CHECK-MINCUT-NEXT:    [[MASKTHREAD:%.*]] = icmp ult i32 [[GTID]], [[CONTCOUNT_IN]]
; CHECK-MINCUT-NEXT:    br i1 [[MASKTHREAD]], label [[CACHEREMAT0:%.*]], label [[THREADEXIT:%.*]]
; CHECK-MINCUT:       CacheRemat0:
; CHECK-MINCUT-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 4
; CHECK-MINCUT-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8
; CHECK-MINCUT-NEXT:    [[TMP8:%.*]] = getelementptr inbounds ptr, ptr [[TMP7]], i32 1
; CHECK-MINCUT-NEXT:    [[CACHE_IN_PTR:%.*]] = load ptr, ptr [[TMP8]], align 8
; CHECK-MINCUT-NEXT:    [[CACHECELL1:%.*]] = getelementptr inbounds [[CACHE_CELL0:%.*]], ptr [[CACHE_IN_PTR]], i32 [[GTID]]
; CHECK-MINCUT-NEXT:    [[ARRAYIDX_CACHEIDX2:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL1]], i32 0, i32 0
; CHECK-MINCUT-NEXT:    [[ARRAYIDX_CACHE:%.*]] = load ptr, ptr [[ARRAYIDX_CACHEIDX2]], align 8
; CHECK-MINCUT-NEXT:    [[VAL_CACHEIDX3:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL1]], i32 0, i32 1
; CHECK-MINCUT-NEXT:    [[VAL_CACHE:%.*]] = load double, ptr [[VAL_CACHEIDX3]], align 8
; CHECK-MINCUT-NEXT:    [[SUB_RECOMPUTE:%.*]] = fsub double [[VAL_CACHE]], 1.000000e+00
; CHECK-MINCUT-NEXT:    [[ADD_RECOMPUTE:%.*]] = fadd double [[VAL_CACHE]], 2.000000e+00
; CHECK-MINCUT-NEXT:    [[MUL_RECOMPUTE:%.*]] = fmul double [[VAL_CACHE]], 3.000000e+00
; CHECK-MINCUT-NEXT:    [[DIV_RECOMPUTE:%.*]] = fmul double [[VAL_CACHE]], 4.000000e+00
; CHECK-MINCUT-NEXT:    [[RES1:%.*]] = fmul double [[SUB_RECOMPUTE]], [[ADD_RECOMPUTE]]
; CHECK-MINCUT-NEXT:    [[RES2:%.*]] = fmul double [[RES1]], [[MUL_RECOMPUTE]]
; CHECK-MINCUT-NEXT:    [[RES3:%.*]] = fmul double [[RES2]], [[DIV_RECOMPUTE]]
; CHECK-MINCUT-NEXT:    store double [[RES3]], ptr [[ARRAYIDX_CACHE]], align 8
; CHECK-MINCUT-NEXT:    [[MUL1:%.*]] = fmul double [[VAL_CACHE]], [[VAL_CACHE]]
; CHECK-MINCUT-NEXT:    store double [[MUL1]], ptr [[ARRAYIDX_CACHE]], align 8
; CHECK-MINCUT-NEXT:    call void @__kmpc_target_deinit()
; CHECK-MINCUT-NEXT:    ret void
; CHECK-MINCUT:       ThreadExit:
; CHECK-MINCUT-NEXT:    call void asm sideeffect "exit
; CHECK-MINCUT-NEXT:    unreachable
;
