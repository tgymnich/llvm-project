; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --include-generated-funcs --version 4
; RUN: opt < %s -S -passes="openmp-opt-postlink,ipsccp,simplifycfg" | FileCheck %s

target triple = "nvptx64"

%struct.ident_t = type { i32, i32, i32, i32, ptr }
%struct.KernelEnvironmentTy = type { %struct.ConfigurationEnvironmentTy, ptr, ptr }
%struct.ConfigurationEnvironmentTy = type { i8, i8, i8, i32, i32, i32, i32, i32, i32, i32, ptr }
%struct.KernelLaunchEnvironmentTy = type { i32, i32, ptr, i32 }

@test_kernel_environment = weak_odr protected local_unnamed_addr constant %struct.KernelEnvironmentTy { %struct.ConfigurationEnvironmentTy { i8 0, i8 0, i8 2, i32 1, i32 512, i32 1, i32 1, i32 0, i32 0, i32 1, ptr null }, ptr null, ptr null }

declare i1 @__ompx_split()

declare i32 @__kmpc_target_init(ptr, ptr)
declare void @__kmpc_target_deinit()

define void @test(ptr %launch_env, ptr %tid_addr, ptr %ptr, ptr %dyn) "kernel" "omp_target_thread_limit"="32" "omp_target_num_teams"="1" {
  entry:
  %i = call i32 @__kmpc_target_init(ptr @test_kernel_environment, ptr %dyn)
  %tid = load i64, ptr %tid_addr
  %arrayidx = getelementptr inbounds double, ptr %ptr, i64 %tid
  %cmp = icmp ult i64 0, %tid
  br i1 %cmp, label %if, label %end
  if:
  call i1 @__ompx_split()
  %val1 = load double, ptr %arrayidx
  %add = fadd double %val1, 2.0
  store double %add, ptr %arrayidx
  br label %end
  end:
  %val2 = load double, ptr %arrayidx
  %mul = fmul double %val2, %val2
  store double %mul, ptr %arrayidx
  call void @__kmpc_target_deinit()
  ret void
}

!llvm.module.flags = !{!3, !4}

!3 = !{i32 7, !"openmp", i32 51}
!4 = !{i32 7, !"openmp-device", i32 51}


; CHECK-LABEL: define void @test(
; CHECK-SAME: ptr [[LAUNCH_ENV:%.*]], ptr [[TID_ADDR:%.*]], ptr [[PTR:%.*]], ptr [[DYN:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[I:%.*]] = call i32 @__kmpc_target_init(ptr @test_kernel_environment, ptr [[DYN]])
; CHECK-NEXT:    [[TID:%.*]] = load i64, ptr [[TID_ADDR]], align 8
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, ptr [[PTR]], i64 [[TID]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp ult i64 0, [[TID]]
; CHECK-NEXT:    br i1 [[CMP]], label [[CACHESTORE0:%.*]], label [[END:%.*]]
; CHECK:       CacheStore0:
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0:%.*]], ptr [[LAUNCH_ENV]], i32 0, i32 3
; CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8
; CHECK-NEXT:    [[CONTCOUNT_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 0
; CHECK-NEXT:    [[CACHEIDX:%.*]] = atomicrmw add ptr [[CONTCOUNT_PTR]], i32 1 monotonic, align 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds ptr, ptr [[TMP3]], i32 0
; CHECK-NEXT:    [[CACHE_OUT_PTR:%.*]] = load ptr, ptr [[TMP4]], align 8
; CHECK-NEXT:    [[CACHECELL:%.*]] = getelementptr inbounds [[CACHE_CELL0:%.*]], ptr [[CACHE_OUT_PTR]], i32 [[CACHEIDX]]
; CHECK-NEXT:    [[ARRAYIDX_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARRAYIDX]], ptr [[ARRAYIDX_CACHEIDX]], align 8
; CHECK-NEXT:    call void asm sideeffect "exit
; CHECK-NEXT:    unreachable
; CHECK:       end:
; CHECK-NEXT:    [[VAL2:%.*]] = load double, ptr [[ARRAYIDX]], align 8
; CHECK-NEXT:    [[MUL:%.*]] = fmul double [[VAL2]], [[VAL2]]
; CHECK-NEXT:    store double [[MUL]], ptr [[ARRAYIDX]], align 8
; CHECK-NEXT:    call void @__kmpc_target_deinit()
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define void @test_contd_0(
; CHECK-SAME: ptr [[LAUNCH_ENV:%.*]], ptr [[TID_ADDR:%.*]], ptr [[PTR:%.*]], ptr [[DYN:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
; CHECK-NEXT:    [[TMP3:%.*]] = mul i32 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[GTID:%.*]] = add i32 [[TMP0]], [[TMP3]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0:%.*]], ptr [[LAUNCH_ENV]], i32 0, i32 3
; CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP4]], align 8
; CHECK-NEXT:    [[CONTCOUNT_IN_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP5]], i32 1
; CHECK-NEXT:    [[CONTCOUNT_IN:%.*]] = load i32, ptr [[CONTCOUNT_IN_PTR]], align 4
; CHECK-NEXT:    [[MASKTHREAD:%.*]] = icmp ult i32 [[GTID]], [[CONTCOUNT_IN]]
; CHECK-NEXT:    br i1 [[MASKTHREAD]], label [[CACHEREMAT0:%.*]], label [[THREADEXIT:%.*]]
; CHECK:       CacheRemat0:
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[LAUNCH_ENV]], i32 0, i32 4
; CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds ptr, ptr [[TMP7]], i32 1
; CHECK-NEXT:    [[CACHE_IN_PTR:%.*]] = load ptr, ptr [[TMP8]], align 8
; CHECK-NEXT:    [[CACHECELL2:%.*]] = getelementptr inbounds [[CACHE_CELL0:%.*]], ptr [[CACHE_IN_PTR]], i32 [[GTID]]
; CHECK-NEXT:    [[ARRAYIDX_CACHEIDX3:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL2]], i32 0, i32 0
; CHECK-NEXT:    [[ARRAYIDX_CACHE:%.*]] = load ptr, ptr [[ARRAYIDX_CACHEIDX3]], align 8
; CHECK-NEXT:    [[VAL1:%.*]] = load double, ptr [[ARRAYIDX_CACHE]], align 8
; CHECK-NEXT:    [[ADD:%.*]] = fadd double [[VAL1]], 2.000000e+00
; CHECK-NEXT:    store double [[ADD]], ptr [[ARRAYIDX_CACHE]], align 8
; CHECK-NEXT:    [[VAL2:%.*]] = load double, ptr [[ARRAYIDX_CACHE]], align 8
; CHECK-NEXT:    [[MUL:%.*]] = fmul double [[VAL2]], [[VAL2]]
; CHECK-NEXT:    store double [[MUL]], ptr [[ARRAYIDX_CACHE]], align 8
; CHECK-NEXT:    call void @__kmpc_target_deinit()
; CHECK-NEXT:    ret void
; CHECK:       ThreadExit:
; CHECK-NEXT:    call void asm sideeffect "exit
; CHECK-NEXT:    unreachable
;
