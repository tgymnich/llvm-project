; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --include-generated-funcs --version 4
; RUN: opt < %s -S -passes="openmp-opt-postlink,ipsccp,simplifycfg" | FileCheck %s

target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"
target triple = "nvptx64-nvidia-cuda"

%struct.KernelEnvironmentTy = type { %struct.ConfigurationEnvironmentTy, ptr, ptr }
%struct.ConfigurationEnvironmentTy = type { i8, i8, i8, i32, i32, i32, i32, i32, i32, i32, ptr }

@__omp_offloading_test_kernel_environment = weak_odr protected local_unnamed_addr constant %struct.KernelEnvironmentTy { %struct.ConfigurationEnvironmentTy { i8 0, i8 0, i8 2, i32 1, i32 512, i32 1, i32 1, i32 0, i32 0, i32 1, ptr null }, ptr null, ptr null }

declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare noundef i32 @llvm.nvvm.read.ptx.sreg.ntid.x() #0

declare void @llvm.assume(i1 noundef) #2

declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

declare noundef i32 @llvm.nvvm.read.ptx.sreg.nctaid.x() #0

declare double @llvm.fmuladd.f64(double, double, double) #0

declare i1 @__ompx_split() local_unnamed_addr #1

define weak_odr protected void @__omp_offloading_test(ptr noalias noundef %arg, ptr noundef %arg1) local_unnamed_addr #3 {
entry:
  %i = tail call noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #4
  %i2 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #4
  %i3 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x() #5
  %i4 = icmp ult i32 %i2, %i3
  tail call void @llvm.assume(i1 noundef %i4) #6
  %i5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ntid.x() #5
  %i6 = mul nsw i32 %i5, %i2
  %i7 = add nsw i32 %i6, %i
  %i8 = srem i32 %i7, 6
  %i9 = icmp eq i32 %i8, 0
  br i1 %i9, label %bb2, label %bb1

bb1:                                              ; preds = %entry
  %i11 = sext i32 %i7 to i64
  %i12 = getelementptr inbounds double, ptr %arg1, i64 %i11
  %i13 = load double, ptr %i12
  %i14 = tail call double @llvm.fmuladd.f64(double %i13, double %i13, double 2.000000e+00)
  store double %i14, ptr %i12
  br label %exit

bb2:                                              ; preds = %entry
  tail call i1 @__ompx_split() #7
  %i16 = sext i32 %i7 to i64
  %i17 = getelementptr inbounds double, ptr %arg1, i64 %i16
  %i18 = load double, ptr %i17
  %i19 = tail call double @llvm.fmuladd.f64(double %i18, double %i18, double 3.000000e+00)
  store double %i19, ptr %i17
  br label %exit

exit:                                             ; preds = %bb2, %bb1
  ret void
}

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="sm_86" "target-features"="+ptx81,+sm_86" }
attributes #2 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #3 = { alwaysinline norecurse nounwind "frame-pointer"="all" "kernel" "no-trapping-math"="true" "omp_target_num_teams"="1" "omp_target_thread_limit"="512" "stack-protector-buffer-size"="8" "target-cpu"="sm_86" "target-features"="+ptx81,+sm_86" }
attributes #4 = { nofree nosync willreturn "llvm.assume"="ompx_no_call_asm" }
attributes #5 = { nosync "llvm.assume"="ompx_no_call_asm" }
attributes #6 = { memory(write) "llvm.assume"="ompx_no_call_asm" }
attributes #7 = { convergent nounwind }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !1}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8, !9}
!nvvm.annotations = !{!10, !11, !12, !13}
!omp_offload.info = !{!14}
!nvvmir.version = !{!15}

!0 = !{!"clang version 18.0.0git (git@github.com:tgymnich/llvm-project.git e9b78a0b34fe6b87e043d88419c1d2ab7ce8c05a)"}
!1 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!2 = !{i32 1, !"wchar_size", i32 4}
!3 = !{i32 7, !"openmp", i32 51}
!4 = !{i32 7, !"openmp-device", i32 51}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 7, !"frame-pointer", i32 2}
!7 = !{i32 1, !"ThinLTO", i32 0}
!8 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!9 = !{i32 2, !"SDK Version", [2 x i32] [i32 12, i32 1]}
!10 = !{ptr @__omp_offloading_test, !"maxclusterrank", i32 1}
!11 = !{ptr @__omp_offloading_test, !"minctasm", i32 1}
!12 = !{ptr @__omp_offloading_test, !"maxntidx", i32 512}
!13 = !{ptr @__omp_offloading_test, !"kernel", i32 1}
!14 = !{i32 0, i32 64769, i32 2753303, !"test", i32 25, i32 0, i32 0}
!15 = !{i32 2, i32 0}


; CHECK-LABEL: define weak_odr protected void @__omp_offloading_test(
; CHECK-SAME: ptr noalias noundef [[ARG:%.*]], ptr noundef [[ARG1:%.*]]) local_unnamed_addr #[[ATTR3:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[I5:%.*]] = tail call i32 @llvm.nvvm.read.ptx.sreg.ntid.x() #[[ATTR4:[0-9]+]]
; CHECK-NEXT:    [[I3:%.*]] = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x() #[[ATTR4]]
; CHECK-NEXT:    [[I2:%.*]] = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #[[ATTR5:[0-9]+]]
; CHECK-NEXT:    [[I:%.*]] = tail call noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #[[ATTR5]]
; CHECK-NEXT:    [[I4:%.*]] = icmp ult i32 [[I2]], [[I3]]
; CHECK-NEXT:    tail call void @llvm.assume(i1 noundef [[I4]]) #[[ATTR6:[0-9]+]]
; CHECK-NEXT:    [[I6:%.*]] = mul nsw i32 [[I5]], [[I2]]
; CHECK-NEXT:    [[I7:%.*]] = add nsw i32 [[I6]], [[I]]
; CHECK-NEXT:    [[I8:%.*]] = srem i32 [[I7]], 6
; CHECK-NEXT:    [[I9:%.*]] = icmp eq i32 [[I8]], 0
; CHECK-NEXT:    br i1 [[I9]], label [[CACHESTORE0:%.*]], label [[BB1:%.*]]
; CHECK:       bb1:
; CHECK-NEXT:    [[I11:%.*]] = sext i32 [[I7]] to i64
; CHECK-NEXT:    [[I12:%.*]] = getelementptr inbounds double, ptr [[ARG1]], i64 [[I11]]
; CHECK-NEXT:    [[I13:%.*]] = load double, ptr [[I12]], align 8
; CHECK-NEXT:    [[I14:%.*]] = tail call double @llvm.fmuladd.f64(double [[I13]], double [[I13]], double 2.000000e+00)
; CHECK-NEXT:    store double [[I14]], ptr [[I12]], align 8
; CHECK-NEXT:    ret void
; CHECK:       CacheStore0:
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0:%.*]], ptr [[ARG]], i32 0, i32 3
; CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8
; CHECK-NEXT:    [[CONTCOUNT_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 0
; CHECK-NEXT:    [[CACHEIDX:%.*]] = atomicrmw add ptr [[CONTCOUNT_PTR]], i32 1 monotonic, align 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[ARG]], i32 0, i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds ptr, ptr [[TMP3]], i32 0
; CHECK-NEXT:    [[CACHE_OUT_PTR:%.*]] = load ptr, ptr [[TMP4]], align 8
; CHECK-NEXT:    [[CACHECELL:%.*]] = getelementptr inbounds [[CACHE_CELL0:%.*]], ptr [[CACHE_OUT_PTR]], i32 [[CACHEIDX]]
; CHECK-NEXT:    [[I7_CACHEIDX:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL]], i32 0, i32 0
; CHECK-NEXT:    store i32 [[I7]], ptr [[I7_CACHEIDX]], align 4
; CHECK-NEXT:    call void asm sideeffect "exit
; CHECK-NEXT:    unreachable
;
;
; CHECK-LABEL: define weak_odr protected void @__omp_offloading_test_contd_0(
; CHECK-SAME: ptr noalias noundef [[ARG:%.*]], ptr noundef [[ARG1:%.*]]) local_unnamed_addr #[[ATTR3]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
; CHECK-NEXT:    [[TMP3:%.*]] = mul i32 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[GTID:%.*]] = add i32 [[TMP0]], [[TMP3]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0:%.*]], ptr [[ARG]], i32 0, i32 3
; CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP4]], align 8
; CHECK-NEXT:    [[CONTCOUNT_IN_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP5]], i32 1
; CHECK-NEXT:    [[CONTCOUNT_IN:%.*]] = load i32, ptr [[CONTCOUNT_IN_PTR]], align 4
; CHECK-NEXT:    [[MASKTHREAD:%.*]] = icmp ult i32 [[GTID]], [[CONTCOUNT_IN]]
; CHECK-NEXT:    br i1 [[MASKTHREAD]], label [[CACHEREMAT0:%.*]], label [[THREADEXIT:%.*]]
; CHECK:       CacheRemat0:
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[ARG]], i32 0, i32 4
; CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds ptr, ptr [[TMP7]], i32 1
; CHECK-NEXT:    [[CACHE_IN_PTR:%.*]] = load ptr, ptr [[TMP8]], align 8
; CHECK-NEXT:    [[CACHECELL1:%.*]] = getelementptr inbounds [[CACHE_CELL0:%.*]], ptr [[CACHE_IN_PTR]], i32 [[GTID]]
; CHECK-NEXT:    [[I7_CACHEIDX2:%.*]] = getelementptr inbounds [[CACHE_CELL0]], ptr [[CACHECELL1]], i32 0, i32 0
; CHECK-NEXT:    [[I7_CACHE:%.*]] = load i32, ptr [[I7_CACHEIDX2]], align 4
; CHECK-NEXT:    [[I16:%.*]] = sext i32 [[I7_CACHE]] to i64
; CHECK-NEXT:    [[I17:%.*]] = getelementptr inbounds double, ptr [[ARG1]], i64 [[I16]]
; CHECK-NEXT:    [[I18:%.*]] = load double, ptr [[I17]], align 8
; CHECK-NEXT:    [[I19:%.*]] = tail call double @llvm.fmuladd.f64(double [[I18]], double [[I18]], double 3.000000e+00)
; CHECK-NEXT:    store double [[I19]], ptr [[I17]], align 8
; CHECK-NEXT:    ret void
; CHECK:       ThreadExit:
; CHECK-NEXT:    call void asm sideeffect "exit
; CHECK-NEXT:    unreachable
;
